<?xml version="1.1" encoding="UTF-8" standalone="no"?><flow-definition plugin="workflow-job@2.41">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.9.1"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.9.1">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>OWNER: Hau Hsu</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.3"/>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.32">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.4">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit/>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.93">
    <script>
pipeline {
    agent {
        node {
            label 'tiny_rhel8'
        }
    }
    environment {
        TEST=true
        TOOLCHAIN_PATH="/aaa/bbb/ccc"
    }
    stages {
        stage('Parallel Build') {
            steps {
                cleanWs()
                echo JOB_NAME
                
                writeFile file: 'test-json.json', text: '[{"job": "experimental/test-tester", "wait": true, "conditions": "${TEST}==true", "paramSets": [{"COMPILER_TYPE": "clang", "TOOLCHAIN_PATH": "$TOOLCHAIN_PATH"}, {"COMPILER_TYPE": "gcc"}] }]'
                //writeFile file: 'config2.json', text: '[{"job": "test2"}]'
                script {
                    def configFile = "${JOB_NAME.tokenize('/')[-1]}.json"
                    //def configFiles = findFiles glob: '*.json'
                    
                    def triggerConfigs = readJSON file: "${configFile}"
                    def availableConfigs = triggerConfigs.findAll {
                        // Transfer String to GString and evaluate conditions
                        Eval.me(evaluate(/"${it.get('conditions', '')}"/))
                    }
                    
                    def triggerJobs = [:]
                    availableConfigs.each { config -&gt;
                        config.get("paramSets").eachWithIndex { paramSet, idx -&gt;
                            def params = paramSet.collect { param, val -&gt; 
                                def evaluated = evaluate(/"${val}"/)
                                string(name: param, value: evaluated)
                            }
                            def wait = config.get('wait', false)
                            triggerJobs["${config.job}-$idx"] = {build (job: config.job , parameters: params, wait: wait)}
                        }
                    }
                    
                    parallel triggerJobs
                }
            }
        }
    }
}
    </script>
    <sandbox>false</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>