<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.40">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.7.2"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.7.2">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.1.1"/>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>5</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.3">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.83">
    <script>import groovy.json.JsonSlurper
import groovy.json.JsonSlurperClassic
//import groovy.yaml.*
//import org.yaml.snakeyaml.Yaml

def readJson(filename){
    def json_file = readFile(file: filename)
    def jsonSlurper = new JsonSlurper()
    //def jsonSlurper = new JsonSlurperClassic()
    //def json_map = jsonSlurper.parseText(json_file)
    return jsonSlurper.parseText(json_file)
}

pipeline {
    agent {
        label &apos;tiny&apos;
    }

    stages {
        stage(&apos;Gen yaml&apos;) {
            steps {
                script {
                    sh &quot;&quot;&quot;
                    echo &quot;build_toolchain: true
gcc_config: --enable-multilib --with-cmodel=medany
os: none
run_toolchain_regression: true&quot; &gt; hi.yaml
                    &quot;&quot;&quot;
                }
            }
        }
        stage(&apos;Gen json&apos;) {
            steps {
                script {
                    sh &quot;&quot;&quot;
                    echo &quot;{
  \\&quot;build_toolchain\\&quot;: true,
  \\&quot;gcc_config\\&quot;: \\&quot;--enable-multilib --with-cmodel=medany\\&quot;,
  \\&quot;os\\&quot;: \\&quot;none\\&quot;,
  \\&quot;run_toolchain_regression\\&quot;: true
}&quot; &gt; hi.json
                    &quot;&quot;&quot;
                }
            }
        }
        stage(&apos;list and cat&apos;) {
            steps {
                script {
                    sh &quot;&quot;&quot;
                    ls -al
                    cat hi.yaml
                    cat hi.json
                    &quot;&quot;&quot;
                }
            }
        }
        stage(&apos;read and compare&apos;) {
            steps {
                script {
                    def yaml_map = readYaml file: &apos;hi.yaml&apos;
                    //def jsonSlurper = new JsonSlurper()
                    //def json_map = jsonSlurper.parseText(new File(&apos;./hi.json&apos;).getText(&apos;UTF-8&apos;))
                    //def json_file = readFile(file: &apos;hi.json&apos;)
                    //echo json_file
                    //def json_map = jsonSlurper.parseText(json_file)
                    echo yaml_map.toString()
                    def json_map = readJson(&apos;hi.json&apos;)
                    echo json_map.toString()
                    
                    //def yaml_file = readFile(file: &apos;hi.yaml&apos;)
                    //def yaml_map = new YamlSlurper().parseText(yaml_file)
                    //echo yaml_map.toString()
                    
                    //def yaml = new Yaml().load((&quot;hi.yaml&quot; as File).text)
                    //echo yaml_map.toString()
                }
            }
        }
    }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <authToken>hehe</authToken>
  <disabled>false</disabled>
</flow-definition>