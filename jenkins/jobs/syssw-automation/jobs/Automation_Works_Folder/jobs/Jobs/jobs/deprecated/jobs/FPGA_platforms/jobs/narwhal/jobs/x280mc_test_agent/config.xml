<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.3"/>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.18.1">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.4">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>syssw_automation_tools_branch_name</name>
          <defaultValue>dev/maxh/automation_works</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>META_SIFIVE_BRANCH</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>FUSDK_MACHINE</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>Dispatcher_Id</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>public_or_private</name>
          <defaultValue>private</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>NFS_Path</name>
          <defaultValue>/work/jenkins/syssw</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>Build_Sub_Path</name>
          <defaultValue>FUSDK-build</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>tests_to_run</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>Test_Result_Save_Path</name>
          <defaultValue>test_result</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>predefine_serial_port</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>NFS_bitstream_path</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>bitstream_core_name</name>
          <defaultValue>x280mc</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>release_code_name</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>bootRom_ID</name>
          <defaultValue>10</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>epsilon02</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

workdir=&quot;${NFS_Path}/FPGA_test_platforms/${release_code_name}/${JOB_BASE_NAME}/${BUILD_ID}&quot;
# workdir=&quot;/work/jenkins/meta_sifive_build/$FUSDK_MACHINE&quot;
mkdir -p $workdir
chmod a+x -R $workdir
cd $workdir

printenv

#kill prexisted nbd server
kill -9 `ps aux | grep nbd |grep cfg | awk &apos;{print $2}&apos;`

# find USB COM port
if [ ! -z &quot;${predefine_serial_port}&quot; ];
then
    devnode=&quot;${predefine_serial_port}&quot;
else
    devnode=`find /dev/serial/by-id/ -name &quot;*CP2105*if01*&quot; | xargs readlink -f | xargs basename`
fi
echo &quot;devnode is /dev/$devnode&quot;
export devnode

##set python
if [ ! -z `lsb_release -a | grep -o Ubuntu | head -1` ]; then
	export PATH=/sifive/tools/python/python/3.9.2/bin:$PATH
else
	export PATH=/sifive/tools/python/python/rhel8/3.9.2/bin:$PATH
fi

##make sure py has this package
pip3 install pyserial pexpect


##get syssw_automation_tools
cd ${workdir}
git clone --recursive -b ${syssw_automation_tools_branch_name} git@github.com:sifive/syssw_automation_tools.git

##get and build and run nbd-server
cd ${workdir}
wget https://sourceforge.net/projects/nbd/files/latest/download -O nbd-latest.tar.xz --no-check-certificate
tar -xvf nbd-latest.tar.xz
nbd_directory_name=`ls -d nbd-* | grep -v tar`
cd ${nbd_directory_name}
./configure
make
# cp -r ${NFS_Path}/epsilon_binaries/nbd* ${workdir}
# cd ${workdir}/nbd*
set -x

ext4_path=`find ${NFS_Path}/${Build_Sub_Path}-${public_or_private}/${FUSDK_MACHINE}/${META_SIFIVE_BRANCH} -name &quot;demo*.ext4&quot;`
echo [generic] &gt;&gt; new_server.cfg
echo	allowlist = true &gt;&gt; new_server.cfg
echo [sifive-fpga] &gt;&gt; new_server.cfg
echo	exportname = ${ext4_path} &gt;&gt; new_server.cfg
echo    port = 10809 &gt;&gt; new_server.cfg

./nbd-server -C new_server.cfg &amp;
nbd_server_pid=$!

##get non-root tftp server
cd ${workdir}
git clone git@github.com:sifive/PyTFTPd-private.git
if [ ! -z &quot;${predefine_tftp_port}&quot; ];
then
    tftp_port=&quot;${predefine_tftp_port}&quot;
else
    tftp_port=&quot;12800&quot;
fi
cd PyTFTPd-private
python3 tftpd.py ${tftp_port} ${NFS_Path}/${Build_Sub_Path}-${public_or_private}/${FUSDK_MACHINE}/${META_SIFIVE_BRANCH} &amp;
pyTFTPd_pid=$!

ls -al

## prepare bitstream files
cd ${workdir}
bitstream_tar_location=`find ${NFS_bitstream_path} -name &quot;*_${bitstream_core_name}_*&quot;`
bitstream_tar_name=`basename ${bitstream_tar_location}`
bitstream_folder_name=`echo ${bitstream_tar_name} | sed &apos;s/\.tar\.gz//&apos;`
cp ${bitstream_tar_location} ${workdir}
mkdir ${workdir}/${bitstream_folder_name}
tar -xvf ${workdir}/${bitstream_tar_name} -C ${workdir}/${bitstream_folder_name}
bitstream_name=`find ${workdir}/${bitstream_folder_name} -name &quot;*.bit&quot;`

host_machine_name=`hostname -s`
## fpga boot to u-boot proper
cd ${workdir}/syssw_automation_tools

boardtest-power cycle
sleep 30

./fpga_regression_tw/script/pro_fpga_run_linux.py \
	-i ini_templates/${release_code_name}_${bitstream_core_name}_${host_machine_name}.ini \
    -p /dev/$devnode \
    -l run.log -v \
    -skip-gengdb \
    -ubootitb ${NFS_Path}/${Build_Sub_Path}-${public_or_private}/${FUSDK_MACHINE}/${META_SIFIVE_BRANCH}/u-boot.itb \
    -ubootspl ${NFS_Path}/${Build_Sub_Path}-${public_or_private}/${FUSDK_MACHINE}/${META_SIFIVE_BRANCH}/u-boot-spl.bin \
    -y -b2uboot \
    -bit ${bitstream_name}
result=$?

./fpga_regression_tw/script/pro_fpga_run_linux.py \
	-i ini_templates/${release_code_name}_${bitstream_core_name}_${host_machine_name}.ini \
    -p /dev/$devnode \
    -l run.log -v \
    -skip-gengdb \
    -ubootitb ${NFS_Path}/${Build_Sub_Path}-${public_or_private}/${FUSDK_MACHINE}/${META_SIFIVE_BRANCH}/u-boot.itb \
    -ubootspl ${NFS_Path}/${Build_Sub_Path}-${public_or_private}/${FUSDK_MACHINE}/${META_SIFIVE_BRANCH}/u-boot-spl.bin \
    -y -b2uboot \
    -bit ${bitstream_name}
result=$?


export kernel_image_path=`find ${NFS_Path}/${Build_Sub_Path}-${public_or_private}/${FUSDK_MACHINE}/${META_SIFIVE_BRANCH} -name &quot;Image*&quot; | xargs basename`
export device_tree_name=`find ${NFS_Path}/${Build_Sub_Path}-${public_or_private}/${FUSDK_MACHINE}/${META_SIFIVE_BRANCH} -name &quot;*$bootRom_ID.dtb*&quot; | sed &quot;s@${NFS_Path}/${Build_Sub_Path}-${public_or_private}/${FUSDK_MACHINE}/${META_SIFIVE_BRANCH}/@@&quot;`

/home/maxh/sifive/syssw_automation_tools/did.exp
cd ${workdir}/syssw_automation_tools/automation_tests/ 
./combine_tests.sh

#exit
kill -9 ${pyTFTPd_pid}

set +x
exit $result</command>
      <configuredLocalRules/>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers>
    <hudson.plugins.timestamper.TimestamperBuildWrapper plugin="timestamper@1.13"/>
    <hudson.plugins.ansicolor.AnsiColorBuildWrapper plugin="ansicolor@1.0.0">
      <colorMapName>xterm</colorMapName>
    </hudson.plugins.ansicolor.AnsiColorBuildWrapper>
    <com.cloudbees.jenkins.plugins.sshagent.SSHAgentBuildWrapper plugin="ssh-agent@1.22">
      <credentialIds>
        <string>ad25d95a-4a30-4cc9-bda9-e836d51af0b9</string>
      </credentialIds>
      <ignoreMissing>true</ignoreMissing>
    </com.cloudbees.jenkins.plugins.sshagent.SSHAgentBuildWrapper>
  </buildWrappers>
</project>