<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>building fusdk based meta-sifive-private</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.3"/>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.18.1">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.4">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>FUSDK_MACHINE</name>
          <description>Pass MACHINE variable to bitbake</description>
          <defaultValue>qemuriscv64</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>META_SIFIVE_PRIVATE_BRANCH</name>
          <description>branch name of meta-sifive-private</description>
          <defaultValue>rel/sifive-fpga/202103</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>FUSDK_MANIFEST</name>
          <description>manifest.xml of meta-sifive-private</description>
          <defaultValue>tools/manifests/sifive.xml</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>BITBAKE_PACKAGE</name>
          <description>the package name of bitbak</description>
          <defaultValue>demo-coreip-cli</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>NUM_OF_CORES</name>
          <description>Decide how many cores for build.</description>
          <defaultValue>32</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>NFS_Path</name>
          <defaultValue>/work/jenkins/syssw</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>SSTATE_Sub_Path</name>
          <defaultValue>share-sstate</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>Build_Sub_Path</name>
          <defaultValue>FUSDK-build</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>PR_NUM</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>Put_initramfs_image_to_NFS</name>
          <defaultValue>false</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>syssw_automation_tools_branch_name</name>
          <defaultValue>dev/maxh/add_qemu_tests</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>10</daysToKeep>
        <numToKeep>5</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>SLURM.SMALL.034 || SLURM.SMALL.035</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <authToken>AutoBuild_Max</authToken>
  <triggers>
    <hudson.triggers.SCMTrigger>
      <spec>0 0 1 * *</spec>
      <ignorePostCommitHooks>false</ignorePostCommitHooks>
    </hudson.triggers.SCMTrigger>
  </triggers>
  <concurrentBuild>true</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

# for debugging
echo $NODE_NAME
hostname
build_date=`date +%m-%d-%Y`
echo &quot;build date = &lt;$build_date&gt;&quot;
echo &quot;USER=$USER&quot;
echo &quot;HOME=$HOME&quot;
echo &quot;PWD=$PWD&quot;
echo &quot;WORKSPACE=$WORKSPACE&quot;
echo &quot;git config --global --list&quot;

git config --global --replace-all url.&quot;git@github.com:&quot;.insteadOf ssh://git@github.com/
git config --global --add url.&quot;git@github.com:&quot;.insteadOf git://git@github.com/

git config --global --list

# clear and reset folder if needed
rm -rf /scratch/syssw/automation/jenkins/$FUSDK_MACHINE
export workdir=&quot;/scratch/syssw/automation/jenkins/$FUSDK_MACHINE&quot;
# workdir=&quot;/work/jenkins/meta_sifive_build/$FUSDK_MACHINE&quot;
mkdir -p $workdir
chmod a+w -R $workdir
cd $workdir


echo &quot;check repo&quot;
mkdir ~/bin
PATH=~/bin:$PATH
curl https://storage.googleapis.com/git-repo-downloads/repo &gt; ~/bin/repo
chmod a+x ~/bin/repo


echo &quot;load python3&quot;
module load python/python/3.8.1

echo &quot;fallback check&quot;
if ! python3 -c &apos;import sys; assert sys.version_info &gt;= (3,6)&apos; &gt; /dev/null; then
    echo &quot;python load failed&quot;
    export PATH=/sifive/tools/python/python/3.8.1/bin:$PATH
    python3 --version
fi

#
echo &quot;clean old meta-sifive-private&quot;
# rm -rf .repo ./* ./build
# rm -rf meta-sifive-private meta-clang meta-riscv meta-openembedded openembedded-core .repo

# clone FUSDK
echo ${META_SIFIVE_PRIVATE_BRANCH}
repo init -u git@github.com:sifive/meta-sifive-private -b $META_SIFIVE_PRIVATE_BRANCH -m $FUSDK_MANIFEST
repo sync


#######
cd meta-sifive-private
git checkout $META_SIFIVE_PRIVATE_BRANCH
git fetch sifive-private pull/${PR_NUM}/head
git checkout -b MERGING FETCH_HEAD
cd ..


git clone -b ${syssw_automation_tools_branch_name} git@github.com:sifive/syssw_automation_tools.git

#######

# OpenEmbedded-Core requires GCC 6 or newer to be available on the host system, download the pre-built one
./openembedded-core/scripts/install-buildtools -r yocto-3.2_M2 -t 20200729
. ./openembedded-core/buildtools/environment-setup-x86_64-pokysdk-linux





# Setting up Build Environment
. ./meta-sifive-private/setup.sh


# build fusdk
PARALLEL_MAKE=&quot;-j ${NUM_OF_CORES}&quot; BB_NUMBER_THREADS=${NUM_OF_CORES} MACHINE=$FUSDK_MACHINE bitbake $BITBAKE_PACKAGE
build_result=$?

pwd
echo $PATH
echo $LD_LIBRARY_PATH

#if [ &quot;$QEMU_TEST&quot; == &quot;true&quot; ] ; then
#	cd ../meta-sifive-private
#    chmod 755 ./qemu_stress-ng.exp
#    ./qemu_stress-ng.exp
#fi

if [ &quot;$build_result&quot; == &quot;0&quot; ]; then

    # Avoid copy  big artifacts here.
	#echo &quot;PWD=$PWD&quot;
	#ls -al $PWD/tmp-glibc/deploy/images/$FUSDK_MACHINE/
	#ls
	rm -rf $NFS_Path/$Build_Sub_Path/$FUSDK_MACHINE/
	mkdir -p $NFS_Path/$Build_Sub_Path/$FUSDK_MACHINE/

	if [ &quot;${FUSDK_MACHINE}&quot; == &quot;sifive-fpga&quot; ];then
        # copy xz file (SD image and rootfs)
        cp -f $workdir/build/tmp-glibc/deploy/images/$FUSDK_MACHINE/$BITBAKE_PACKAGE-$FUSDK_MACHINE.wic.* $NFS_Path/$Build_Sub_Path/$FUSDK_MACHINE/
        cp -f $workdir/build/tmp-glibc/deploy/images/$FUSDK_MACHINE/$BITBAKE_PACKAGE-$FUSDK_MACHINE-*rootfs.tar.* $NFS_Path/$Build_Sub_Path/$FUSDK_MACHINE/

        # copy u-boot.itb and u-boot-spl.bin
        cp -f $workdir/build/tmp-glibc/deploy/images/$FUSDK_MACHINE/u-boot*.bin     $NFS_Path/$Build_Sub_Path/$FUSDK_MACHINE/
        cp -f $workdir/build/tmp-glibc/deploy/images/$FUSDK_MACHINE/u-boot*.elf     $NFS_Path/$Build_Sub_Path/$FUSDK_MACHINE/
        cp -f $workdir/build/tmp-glibc/deploy/images/$FUSDK_MACHINE/u-boot*.itb     $NFS_Path/$Build_Sub_Path/$FUSDK_MACHINE/

        # copy kernel image
        cp -f $workdir/build/tmp-glibc/deploy/images/$FUSDK_MACHINE/Image*.bin      $NFS_Path/$Build_Sub_Path/$FUSDK_MACHINE/

        # copy modules
        cp -f $workdir/build/tmp-glibc/deploy/images/$FUSDK_MACHINE/modules*.tgz    $NFS_Path/$Build_Sub_Path/$FUSDK_MACHINE/
    elif [ &quot;${FUSDK_MACHINE}&quot; == &quot;qemuriscv64&quot; ];then
    	if [ &quot;$Put_initramfs_image_to_NFS&quot; == &quot;false&quot; ]; then
        	cp -f `ls $workdir/build/tmp-glibc/deploy/images/$FUSDK_MACHINE/Image*.bin | grep -v initramfs`     $NFS_Path/$Build_Sub_Path/$FUSDK_MACHINE/
            cp -f `ls $workdir/build/tmp-glibc/deploy/images/$FUSDK_MACHINE/demo*.conf | grep -v initramfs`     $NFS_Path/$Build_Sub_Path/$FUSDK_MACHINE/
        else
        	cp -f $workdir/build/tmp-glibc/deploy/images/$FUSDK_MACHINE/Image*.bin     $NFS_Path/$Build_Sub_Path/$FUSDK_MACHINE/
            cp -f $workdir/build/tmp-glibc/deploy/images/$FUSDK_MACHINE/demo*.conf      $NFS_Path/$Build_Sub_Path/$FUSDK_MACHINE/
        fi
        
        cp -f $workdir/build/tmp-glibc/deploy/images/$FUSDK_MACHINE/fw*.elf         $NFS_Path/$Build_Sub_Path/$FUSDK_MACHINE/
        cp -f $workdir/build/tmp-glibc/deploy/images/$FUSDK_MACHINE/demo*.ext4      $NFS_Path/$Build_Sub_Path/$FUSDK_MACHINE/
        cp -rf $workdir/build/tmp-glibc/work/x86_64-linux/qemu-helper-native/1.0-r1 $NFS_Path/$Build_Sub_Path/$FUSDK_MACHINE/qemu-native
        cp -rf $workdir/build/tmp-glibc/sysroots-uninative/							$NFS_Path/$Build_Sub_Path/$FUSDK_MACHINE/sysroots
        touch $NFS_Path/$Build_Sub_Path/$FUSDK_MACHINE/build_env
        cd $workdir/meta-sifive-private
        git log | head -1 | sed &apos;s/[^ ]* //&apos; |xargs echo commit_of_meta-sifive-private: &gt;&gt; $NFS_Path/$Build_Sub_Path/$FUSDK_MACHINE/build_env
        echo branch_of_meta-sifive-private: ${META_SIFIVE_PRIVATE_BRANCH} &gt;&gt; $NFS_Path/$Build_Sub_Path/$FUSDK_MACHINE/build_env
        echo building_type: PR &gt;&gt; $NFS_Path/$Build_Sub_Path/$FUSDK_MACHINE/build_env
        echo building_ID : ${BUILD_ID} &gt;&gt; $NFS_Path/$Build_Sub_Path/$FUSDK_MACHINE/build_env
        echo PR_number : ${PR_NUM} &gt;&gt; $NFS_Path/$Build_Sub_Path/$FUSDK_MACHINE/build_env
    else
        echo &quot;no such a machine&quot;
    fi
fi

rm -rf /scratch/syssw/automation/jenkins/$FUSDK_MACHINE

exit $build_result</command>
      <configuredLocalRules/>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.plugins.emailext.ExtendedEmailPublisher plugin="email-ext@2.83">
      <recipientList>max.hsu@sifive.com</recipientList>
      <configuredTriggers>
        <hudson.plugins.emailext.plugins.trigger.FailureTrigger>
          <email>
            <subject>$PROJECT_DEFAULT_SUBJECT</subject>
            <body>$PROJECT_DEFAULT_CONTENT</body>
            <recipientProviders>
              <hudson.plugins.emailext.plugins.recipients.DevelopersRecipientProvider/>
            </recipientProviders>
            <attachmentsPattern></attachmentsPattern>
            <attachBuildLog>false</attachBuildLog>
            <compressBuildLog>false</compressBuildLog>
            <replyTo>$PROJECT_DEFAULT_REPLYTO</replyTo>
            <contentType>project</contentType>
          </email>
        </hudson.plugins.emailext.plugins.trigger.FailureTrigger>
      </configuredTriggers>
      <contentType>default</contentType>
      <defaultSubject>$DEFAULT_SUBJECT</defaultSubject>
      <defaultContent>$DEFAULT_CONTENT</defaultContent>
      <attachmentsPattern></attachmentsPattern>
      <presendScript>$DEFAULT_PRESEND_SCRIPT</presendScript>
      <postsendScript>$DEFAULT_POSTSEND_SCRIPT</postsendScript>
      <attachBuildLog>true</attachBuildLog>
      <compressBuildLog>false</compressBuildLog>
      <replyTo>$DEFAULT_REPLYTO</replyTo>
      <from>fusdk_meta-sifive-private_Max_testing</from>
      <saveOutput>false</saveOutput>
      <disabled>false</disabled>
    </hudson.plugins.emailext.ExtendedEmailPublisher>
    <jenkins.plugins.slack.SlackNotifier plugin="slack@2.48">
      <baseUrl></baseUrl>
      <teamDomain></teamDomain>
      <authToken></authToken>
      <tokenCredentialId></tokenCredentialId>
      <botUser>false</botUser>
      <room>C02A1MFSUU9</room>
      <sendAsText>false</sendAsText>
      <iconEmoji></iconEmoji>
      <username>jenkins</username>
      <startNotification>false</startNotification>
      <notifySuccess>false</notifySuccess>
      <notifyAborted>true</notifyAborted>
      <notifyNotBuilt>true</notifyNotBuilt>
      <notifyUnstable>true</notifyUnstable>
      <notifyRegression>false</notifyRegression>
      <notifyFailure>false</notifyFailure>
      <notifyEveryFailure>true</notifyEveryFailure>
      <notifyBackToNormal>false</notifyBackToNormal>
      <notifyRepeatedFailure>false</notifyRepeatedFailure>
      <includeTestSummary>false</includeTestSummary>
      <includeFailedTests>false</includeFailedTests>
      <uploadFiles>false</uploadFiles>
      <artifactIncludes></artifactIncludes>
      <commitInfoChoice>NONE</commitInfoChoice>
      <includeCustomMessage>true</includeCustomMessage>
      <customMessage></customMessage>
      <customMessageSuccess></customMessageSuccess>
      <customMessageAborted></customMessageAborted>
      <customMessageNotBuilt></customMessageNotBuilt>
      <customMessageUnstable></customMessageUnstable>
      <customMessageFailure>FUSDK_MACHINE: $FUSDK_MACHINE
Branch: $META_SIFIVE_PRIVATE_BRANCH
Manifest: $FUSDK_MANIFEST
BUILD URL: $BUILD_URL</customMessageFailure>
    </jenkins.plugins.slack.SlackNotifier>
  </publishers>
  <buildWrappers>
    <hudson.plugins.ansicolor.AnsiColorBuildWrapper plugin="ansicolor@1.0.0">
      <colorMapName>xterm</colorMapName>
    </hudson.plugins.ansicolor.AnsiColorBuildWrapper>
    <com.cloudbees.jenkins.plugins.sshagent.SSHAgentBuildWrapper plugin="ssh-agent@1.22">
      <credentialIds>
        <string>ad25d95a-4a30-4cc9-bda9-e836d51af0b9</string>
      </credentialIds>
      <ignoreMissing>false</ignoreMissing>
    </com.cloudbees.jenkins.plugins.sshagent.SSHAgentBuildWrapper>
    <hudson.plugins.timestamper.TimestamperBuildWrapper plugin="timestamper@1.13"/>
  </buildWrappers>
</project>