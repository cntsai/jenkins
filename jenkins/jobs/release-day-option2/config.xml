<?xml version="1.1" encoding="UTF-8" standalone="no"?><flow-definition plugin="workflow-job@2.41">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.9.1"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.9.1">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description/>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.3"/>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>FEDERATION_HASH</name>
          <description>hash or branch</description>
          <defaultValue>release_generator_narwhal</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.4">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit/>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers/>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.93">
    <script>#!groovy
pipeline{
    agent {
    label 'SLURMTINY004'
    }
    environment {
        slackMessage = "Build for ${JOB_NAME} [Build #: ${BUILD_NUMBER}] ${BUILD_URL}"
    }
    stages {
        stage('Set Vars') {
            steps {
                script {
                    
                    if (params.CONFIG_TYPE == 'standard') {
                        JSON_FILE = "specs/design/standard/${params.CONFIG_NAME}" 
                    }
                    //BCD_CMD = "pwd;cd federation; ls -lrt;source ./scripts/load-wake;wake --init .;export WAKE_ENV=sanmateo;wake -x \'deliver (Nil) VCS exampleTests scdJSON \"$JSON_FILE\"\'"
                }
            }    
        }
        stage('checkout')
        {
           steps {
                checkout([$class: 'GitSCM', branches: [[name: "${FEDERATION_HASH}"]], extensions: [], userRemoteConfigs: [[url: 'git@github.com:sifive/archive-coreip-sifive.git']]])  
                sh 'git submodule update --init federation;cd federation; git checkout ${FEDERATION_HASH};./scripts/quick-submodule-update; source ./scripts/load-wake; wake --init . ;export WAKE_ENV=sanmateo'
                sh 'cd federation; git status'
                
            }
        }
        stage('build') {
           parallel {
                stage('Build standard full e20') {
                    steps {

                        build(job: 'standard-full-e20', parameters: [
                        string(name: 'FEDERATION_HASH', value: "${FEDERATION_HASH}"),
                        string(name: 'CONFIG_TYPE', value: "standard"),
                        string(name: 'CONFIG_NAME', value: "e20")
                        ])
                    }
                }
                stage('Build standard full e21') {
                    steps {

                        build(job: 'standard-full-e21', parameters: [
                        string(name: 'FEDERATION_HASH', value: "${FEDERATION_HASH}"),
                        string(name: 'CONFIG_TYPE', value: "standard"),
                        string(name: 'CONFIG_NAME', value: "e21")
                        ])
                    }
                }
           }
        }
    }
   post {
        success {
            slackSend(            
                message: "Successful ${slackMessage}",
                channel: "diem.mai",
                color: "good",
            )
        }
    }
   
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>