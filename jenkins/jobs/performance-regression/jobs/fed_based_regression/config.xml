<?xml version="1.1" encoding="UTF-8" standalone="no"?><flow-definition plugin="workflow-job@1145.v7f2433caa07f">
  <actions/>
  <description/>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.7"/>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>30</daysToKeep>
        <numToKeep>-1</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.33">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.ChoiceParameterDefinition>
          <name>selectedBuild</name>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>all</string>
              <string>coreip_u74_pl2</string>
              <string>coreip_p270</string>
              <string>coreip_x280</string>
              <string>coreip_p550</string>
              <string>coreip_p650</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>selectedTest</name>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>all</string>
              <string>u74-l2pf</string>
              <string>viu75-128-l2pf</string>
              <string>viu75-256-l2pf</string>
              <string>viu75-256</string>
              <string>u84-l2pf</string>
              <string>u8-corr</string>
              <string>u9-corr</string>
              <string>remove_old_file</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.6">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit/>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers>
        <hudson.triggers.TimerTrigger>
          <spec>27 H(0-3) * * *</spec>
        </hudson.triggers.TimerTrigger>
      </triggers>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2660.vb_c0412dc4e6d">
    <script>import groovy.transform.Field
import org.jenkinsci.plugins.pipeline.modeldefinition.Utils

regressionDir = "/work/sparta/regression/${env.JOB_NAME}"
workspace = "$regressionDir/${env.BUILD_ID}"
sitestRunDir = "/scratch/jenkins/archived-builds/${env.JOB_NAME}/${env.BUILD_ID}"
checkoutNode = "tiny_rhel8||perf_regr_agent_rhel8||small_rhel8"
//buildNode = "tiny_rhel8||perf_regr_agent_rhel8||small_rhel8"
buildNode = null
sitestRunNode = "perf_regr_agent_rhel8||small_rhel8"
federationRoot = workspace
slack_channel='#tw-perf-alert'

summaryMsg = ""
buildFailMsg = ""

def federationCheckout(String commitish, String baseCommit='') {
    def GITHUB_SSH_CREDENTIALS_ID = 'ad25d95a-4a30-4cc9-bda9-e836d51af0b9'
    deleteDir()
    checkout([
        $class: 'GitSCM',
        branches: [[name: commitish]],
        extensions: [[$class: 'CloneOption', reference: '/work/github-cache/federation.git']],
        userRemoteConfigs: [[
            credentialsId: GITHUB_SSH_CREDENTIALS_ID,
            url: "git@github.com:sifive/federation.git"]],
    ])
    if (baseCommit != '') {
        sh "git checkout --detach ; git merge --no-commit $baseCommit"
    }
    sshagent([GITHUB_SSH_CREDENTIALS_ID]) {
        sh "./scripts/quick-submodule-update"
    }
}

def federationTestSetup() {
    timestamps {
        catchError(stageResult: 'FAILURE'){
            sh """
            # Build a test design
            BUILD_DIR=builds ./generate-build fuzzer_l1
            make -C builds/fuzzer_l1 SLURM_FIRRTL=0 SLURM_ENTERPRISE_GENERATOR=0 prelude
            """
        }
    }
}

targetCores = []
buildPass=[]

def federationBuild(targetCore, local) {
    def batch = "-b -j 1"
    if (local) {
        batch = ""
    }
    sh """
        umask 002
        . /sifive/tools/Modules/init-chooser
        
        BUILD_DIR=builds ./generate-build $targetCore
        cd builds/$targetCore
        . ./load-modules
        make sim SITEST_TEST_SLURM_MEM=10G
    """
    xLen = sh(script:"jq '[.. | objects | select (.isa != null)][0] | .isa.xLen ' builds/$targetCore/firrtl/*.objectModel.json", returnStdout:true).replaceAll("\\s","")
    sh """
        umask 002
        . /sifive/tools/Modules/init-chooser
        . ./rc.d/riscv-tools.bashrc
        
        cd builds/$targetCore/sim
        . ../load-modules
        ./sitest $batch --sim=vcs rv${xLen}ui-add
    """
    buildPass.add(targetCore)
    try {
        retry(3) {
            sh """
                umask 002
                . /sifive/tools/Modules/init-chooser
                . ./rc.d/riscv-tools.bashrc
                
                cd builds/$targetCore/sim
                . ../load-modules
                ./sitest $batch --sim=verilator rv${xLen}ui-add
            """
            batch = ""
            sleep(time:10,unit:"MINUTES")
        }
    } catch (e) {
        buildFailMsg += "build `$targetCore` verilator failed\n"
    }
}

def deleteOldFiles(path, days) {
    catchError {
        sh "find $path -mindepth 1 -maxdepth 1 -mtime +$days"
        sh "find $path -mindepth 1 -maxdepth 1 -mtime +$days -exec rm -rf {} +"
    }
}

def notifyBySlack(channel, result='', message='') {
    result = result == null ? 'SUCCESS' : result
    def color=['FAILURE': '#A30200',
               'BUILD_FAIL': '#A30200',
               'PERF_CHANGE':'#DAA038',
               'UNSTABLE': '#DAA038',
               'SUCCESS': '#2EB886']
    slackSend(
        channel: channel,
        color:color[result],
        message: """${env.JOB_NAME} - #${env.BUILD_ID} - ${result} (&lt;${env.RUN_DISPLAY_URL}|Open&gt;)
$message""")
}

def perfTestsToDashboard(path, targetCore, purpose='fed_based_regression', slackChannels=[slack_channel]) {
    stage("$path-dashboard") {
    catchError(stageResult: 'FAILURE'){
        sh "find $path -name result.yaml"
        sh """
            mkdir -p sim/$path
            cat `find $path -name result.yaml` &gt; sim/$path/result_all.yaml
            [ -d venv ] || /work/sparta/scripts/virtualenv venv
        """
        sh """
            hostname
            pwd
            /work/sparta/scripts/insert_dashboard \
                -r sim/$path/result_all.yaml \
                -s sim/$path/alert.yaml \
                --purpose $purpose \
                --build-platform federation \
                --build-config $targetCore \
                --build-git-hash `cd $workspace; git rev-parse --short HEAD` \
                --build-time `cd $workspace; git show -s --format=%aI HEAD` \
                &gt;/dev/null 2&gt; sim/$path/insert_dashboard_alert.log
        """
        try {
            sh """
                cat sim/$path/insert_dashboard_alert.log
                test ! -s sim/$path/insert_dashboard_alert.log
            """
        } catch (e) {
            def bmUrl = sh(
                script:"""grep "^benchmark:" sim/$path/result_all.yaml |sort|uniq|awk 'BEGIN { ORS="" }; {print "&amp;var-benchmark=" \$2}'""",
                returnStdout: true)
            def dashboardUrl = "http://vis01.internal.sifive.com:8203/d/Cae1MF1Mk/platform-summary?orgId=1&amp;var-platform=federation&amp;var-config=$targetCore$bmUrl&amp;var-filter=and%20status%20not%20in%20(%22%22,%20%22golden%22)"

            if (slackChannels) {
                def msg = readFile("sim/$path/insert_dashboard_alert.log")
                def maxlength = 1000
                if (msg.length() &gt; maxlength) {
                    msg = msg.substring(0, maxlength)
                    msg = "$msg ..."
                }
                for (ch in slackChannels) {
                    notifyBySlack(ch, 'PERF_CHANGE', "build: $targetCore\n```$msg``` (&lt;$dashboardUrl|Dashboard&gt;)")
                }
            }

            summaryMsg += "$targetCore performance change &lt;$dashboardUrl|Dashboard&gt;\n"
            unstable "performance result changed"
        }
    }}
}

def parallelStage(stageName, skip=false, path=false, runNode=false, timestampsEn=false, cl) {
    if (skip) {
        Utils.markStageSkippedForConditional(stageName)
        return
    }

    def cl_stage = {-&gt;stage(stageName) {
        sh "hostname; pwd"
        catchError(buildResult: 'FAILURE', stageResult: 'FAILURE'){
            if (timestampsEn) {
                timestamps { cl() }
            } else {
                cl()
            }
        }
    }}
    def cl_dir = path ? {-&gt;dir(path){cl_stage()}} : cl_stage
    def cl_node = runNode ? {-&gt;node(runNode){ cl_dir() }} : cl_dir
    cl_node()
}

def createRunTestStage(targetCore=null, Closure cl) {
    if (targetCore &amp;&amp; !targetCores.contains(targetCore)){
        targetCores.add(targetCore)
    }

    return {stageName -&gt; {-&gt;
        if (targetCore &amp;&amp; !buildPass.contains(targetCore)) {
            Utils.markStageSkippedForConditional(stageName)
            return
        }
        if (targetCore) {
            dir("$workspace/builds/$targetCore") {
                cl()
            }
        } else {
            cl()
        }
    }}
}

def runSitest(targetCore, testcases, jobs=10,
               simulator='verilator', sitestArgs='', Closure cl) {
    if (targetCore &amp;&amp; !targetCores.contains(targetCore)){
        targetCores.add(targetCore)
    }

    return {stageName -&gt; {-&gt;
    if (targetCore &amp;&amp; !buildPass.contains(targetCore)) {
        Utils.markStageSkippedForConditional(stageName)
        return
    }

//    node(sitestRunNode){
    dir("$sitestRunDir/$stageName"){
        stage("sitest") {
            sh """
                hostname
                pwd
                mkdir -p $workspace/builds/$targetCore/sim/$stageName
                ln -sfT $workspace/builds/$targetCore/sim/$stageName ./sim
                [ -e $workspace/builds/$targetCore/sim/\${HOSTNAME%%.*} ] || ln -sfT $sitestRunDir $workspace/builds/$targetCore/sim/\${HOSTNAME%%.*}
            """
        
            dir("$workspace/builds/$targetCore/sim"){
            catchError(buildResult: 'FAILURE', stageResult: 'FAILURE'){
                // TODO: remove this workaround -----------------
                if (targetCore == "coreip_p270" || targetCore == "coreip_x280") {
                    simulator="vcs"
                }
                // ----------------------------------------------

                timestamps {
                    try {
                        sh """
                            set +x
                            . /sifive/tools/Modules/init-chooser
                            . $federationRoot/rc.d/riscv-tools.bashrc
                            . $federationRoot/builds/$targetCore/load-modules
                            module load ruby/ruby/2.7.2
                            set -x
                            export SLURM_ACCOUNT=perf_ci
                            export SALLOC_ACCOUNT=perf_ci
                            ./sitest.actual --sim=$simulator --rundir=\${HOSTNAME%%.*}/$stageName -b --slurm-partition=redhat -j$jobs --nobuild $sitestArgs ${testcases.join(' ')}
                        """
                    } catch (e) {
                        summaryMsg += "run sitest failed for $stageName\n"
                        throw e
                    }
                }
            } // catchError
            }

            sh """
                cp results.xml sim/
                grep failure -B 1 sim/results.xml | grep testcase | grep -o ' name="[^"]*' | grep -o '[^"]*\$' | tee sim/fail_list
            """
        }
        cl()
    } //} // dir, node
    }}
}

corr_done = 0
def trigger_correlation () {
    corr_done += 1
    if (corr_done == 2) {
        build (job: 'performance-regression/rtlsim-correlation', wait: false)
    }
}

runSitestTasks = [
    'u74-l2pf': runSitest('coreip_u74_pl2',
                ["@$federationRoot/test-outlines/test_hwpf_perf.outline"]) {
        perfTestsToDashboard('test_hwpf_perf.outline/SPF_0', 'coreip_u74_pl2', 'SPF_HWPF_Perf_on_U7_U8')
        perfTestsToDashboard('test_hwpf_perf.outline/SPF_1', 'coreip_u74_pl2__spf', 'SPF_HWPF_Perf_on_U7_U8')
    },
    'viu75-128-l2pf': runSitest('coreip_p270',
                ["@$federationRoot/test-outlines/test_hwpf_perf.outline"]) {
        perfTestsToDashboard('test_hwpf_perf.outline/SPF_0', 'coreip_viu75_128', 'SPF_HWPF_Perf_on_U7_U8', false)
        perfTestsToDashboard('test_hwpf_perf.outline/SPF_1', 'coreip_viu75_128__spf', 'SPF_HWPF_Perf_on_U7_U8', false)
    },
    'viu75-256-l2pf': runSitest(
            'coreip_x280',
            ["@$federationRoot/test-outlines/test_hwpf_perf.outline"]){
        perfTestsToDashboard('test_hwpf_perf.outline/SPF_0', 'coreip_viu75_256', 'SPF_HWPF_Perf_on_U7_U8', false)
        perfTestsToDashboard('test_hwpf_perf.outline/SPF_1', 'coreip_viu75_256__spf', 'SPF_HWPF_Perf_on_U7_U8', false)
    },
    'viu75-256': runSitest(
            'coreip_x280',
            ["@$federationRoot/test-outlines/test_vec_bw.outline",
             "@$federationRoot/test-outlines/test_vec_bw_mis.outline",
             "@$federationRoot/test-outlines/test_vec_bw_seg.outline",
             "@$federationRoot/test-outlines/test_vec_bw_seg_mis.outline",
             "@$federationRoot/test-outlines/test_vec_stream.outline"]){
        perfTestsToDashboard('.','coreip_viu75_256', 'Vector_Performance', false)
    },
    'u84-l2pf': runSitest('coreip_p550',
                ["@$federationRoot/test-outlines/test_u8_hwpf_perf.outline"], 30) {
        perfTestsToDashboard('test_u8_hwpf_perf.outline/HWPF_0', 'coreip_u84', 'SPF_HWPF_Perf_on_U7_U8')
        perfTestsToDashboard('test_u8_hwpf_perf.outline/HWPF_1', 'coreip_u84__hwpf', 'SPF_HWPF_Perf_on_U7_U8')
    },
    'p55-corr': createRunTestStage('coreip_p550') {
        try {
            sh """
                export SLURM_ACCOUNT=perf_ci
                srun -p redhat --mem=50G /work/sparta/scripts/jenkins/rtlsim_install /work/sparta/rtlsim/p55
                find /work/sparta/rtlsim/p55/ -mindepth 1 -maxdepth 1 -mtime +90 -exec rm -rf {} +
            """
            trigger_correlation()
        } catch (e) {
            notifyBySlack(slack_channel, 'FAILURE', 'install p55 for correlation failed')
            throw e
        }
    },
    'p65-corr': createRunTestStage('coreip_p650') {
        try {
            sh """
                export SLURM_ACCOUNT=perf_ci
                srun -p redhat --mem=50G /work/sparta/scripts/jenkins/rtlsim_install /work/sparta/rtlsim/p65
                find /work/sparta/rtlsim/p65/ -mindepth 1 -maxdepth 1 -mtime +90 -exec rm -rf {} +
            """
            trigger_correlation()
        } catch (e) {
            notifyBySlack(slack_channel, 'FAILURE', 'install p65 for correlation failed')
            throw e
        }
    },
    'remove_old_file': createRunTestStage {
        deleteOldFiles(regressionDir, 7)
    }
]

node(checkoutNode) {
dir(workspace){
    
    stage('checkout') {
        try {
            federationCheckout('master')
        } catch (e) {
            retry(2) {
                sleep(time:10,unit:"MINUTES")
                federationCheckout('master')
            }
        }
    }
    stage('test-setup') {
        federationTestSetup()
        sh """
            sed -i 's/18G/30G/' mk/base_configs/coreip_x280.mk
            sed -i 's/36G/40G/' mk/base_configs/coreip_p650.mk
        """
    }

    stage('build') {
        env.SLURM_ACCOUNT = 'perf_ci'
        env.SALLOC_ACCOUNT = 'perf_ci'
        env.SLURM_BATCH = 'perf_ci'
        env.SLURM_FIRRTL = 1
        env.SLURM_ENTERPRISE_GENERATOR = 1
        env.SLURM_PARTITION = 'redhat'
    
    parallel targetCores.collectEntries{[it,{-&gt;
    parallelStage(it,
            (selectedBuild!='all' &amp;&amp; selectedBuild!=it),
            workspace, buildNode, true)
        {
            catchError(buildResult: 'FAILURE', stageResult: 'FAILURE'){
                try {
                    federationBuild(it, false)
                } catch (e) {
                    buildFailMsg += "build `$it` failed\n"
                    throw e
                }
            }
        }
    }]}

    }

    if (buildFailMsg) {
        notifyBySlack(slack_channel, 'BUILD_FAIL', buildFailMsg)
    }
    
    stage('run-test') {
        parallel runSitestTasks.collectEntries{k, v -&gt; [k, {-&gt;
            if (selectedTest!='all' &amp;&amp; selectedTest!=k) {
                Utils.markStageSkippedForConditional(k)
            } else {
                v(k)()
            }
        }]} // collectEntries
    }
    
    stage('notify') {
        if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {
            if (currentBuild.previousBuild.result != 'SUCCESS') {
                notifyBySlack(slack_channel, 'Back to normal', summaryMsg)
            }
        } else if (currentBuild.previousBuild.result == 'SUCCESS') {
            notifyBySlack(slack_channel, currentBuild.result, summaryMsg)
        }
    }
}}


</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>true</disabled>
</flow-definition>