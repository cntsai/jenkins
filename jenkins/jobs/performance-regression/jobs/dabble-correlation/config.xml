<?xml version="1.1" encoding="UTF-8" standalone="no"?><flow-definition plugin="workflow-job@1145.v7f2433caa07f">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.9.3"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.9.3">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>daily run dabble-correlation with p55, p55_l1pf_off and p65&#13;
Owners: Hsinyi Lee, Fu-Ching Yang&#13;
Backup: Mike Schoenfelder</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.7"/>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>30</daysToKeep>
        <numToKeep>-1</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.33">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.6">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit/>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers>
        <jenkins.triggers.ReverseBuildTrigger>
          <spec/>
          <upstreamProjects>performance-regression/dabble-func-regr</upstreamProjects>
          <threshold>
            <name>UNSTABLE</name>
            <ordinal>1</ordinal>
            <color>YELLOW</color>
            <completeBuild>true</completeBuild>
          </threshold>
        </jenkins.triggers.ReverseBuildTrigger>
      </triggers>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2660.vb_c0412dc4e6d">
    <script>#!groovy

def slack_channel_for_build='#sparta-veracity-regressions'

regression_dir = ['p55':          "/work/sparta/regression/${JOB_NAME}/p55",
                  'p55_l1pf_off': "/work/sparta/regression/${JOB_NAME}/p55_l1pf_off",
                  'p65':          "/work/sparta/regression/${JOB_NAME}/p65",
                  'p65_l1pf_off': "/work/sparta/regression/${JOB_NAME}/p65_l1pf_off",
                  'tgv':          "/work/sparta/regression/${JOB_NAME}/tgv",
                  'tgv_study':    "/work/sparta/regression/${JOB_NAME}/tgv_study"]

def notifyBySlack(channel, result='', message='') {
    result = result == null ? 'SUCCESS' : result
    def color=['FAILURE': '#A30200',
               'BUILD_FAIL': '#A30200',
               'PERF_CHANGE':'#DAA038',
               'UNSTABLE': '#DAA038',
               'SUCCESS': '#2EB886',
               'Back to normal': '#2EB886']
    slackSend(
        channel: channel,
        color:color[result],
        message: """${env.JOB_NAME} - #${env.BUILD_ID} - ${result} (&lt;${env.RUN_DISPLAY_URL}|Open&gt;)
$message""")
}

def checkVersion(config, githash) {
    if (fileExists("${regression_dir[config]}/$githash/log")) {
        sh("""
            rm -f "${regression_dir[config]}/$githash/log"
        """)
        return true
    }
    
    /* not to skip running */
    return true
    
    return ! fileExists("${regression_dir[config]}/$githash/run.me")
}

def readFileWithMaxLen(filename, maxlength) {
    def msg = readFile(filename)
    print(msg)
    if (msg.length() &gt; maxlength) {
        msg = msg.substring(0, maxlength)
            msg = "$msg ..."
    }else if (msg.length() == 0) {
        return ''
    }
    return "```$msg```\n"
}

def sendErrorLogBySlack(channel, status) {
    def msg = ''
    regression_dir.each { config, regr_dir -&gt;
        if (fileExists("${config}.err")) {
            msg += "$config\n" + readFileWithMaxLen("${config}.err", 500)
            sh "rm -f ${config}.err"
        }
        if (fileExists("${config}.perf.log")) {
            msg += "$config [perf change]\n" + readFileWithMaxLen("${config}.perf.log", 500)
            sh "rm -f ${config}.perf.log"
        }
    }
    notifyBySlack(channel, status, msg)
}

def runStudy(config, githash) {
    def target_dir = "${regression_dir[config]}/$githash"
    dir (target_dir) {
        catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
            sh """
                umask 002; chmod g+w . || true
                /work/sparta/scripts/jenkins/dabble-tgv-regression.sh $githash 2&gt; log || echo "run study fail" &gt;&gt; log
                [ ! -s perf_change.log ] || cp perf_change.log $WORKSPACE/${config}.perf.log
                [ ! -s log ] || ! cat log
            """
        }
        sh """
            [ ! -s log ] || cp log $WORKSPACE/${config}.err
            find ${regression_dir[config]}/ -mindepth 1 -maxdepth 1 -mtime +7 -exec rm -rf {} + || true
        """
    }
    catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE') {
        sh "[ ! -s ${config}.perf.log ] || ! cat ${config}.perf.log"
    }
    sh "rm -rf ${target_dir}-WStmp || true"
}

def runTest(config, githash) {
    def target_dir = "${regression_dir[config]}/$githash"

    dir (target_dir) {
        sh "chmod g+w . || true"
        catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
            sh "/work/sparta/scripts/jenkins/dabble-correlate.sh $config $githash"
        }
        sh "[ ! -s log ] || cp log $WORKSPACE/${config}.err"
        //sh "[ ! -s alert.log ] || cp alert.log $WORKSPACE/${config}.perf.log"
        sh "find ${regression_dir[config]}/ -mindepth 1 -maxdepth 1 -mtime +7 -exec rm -rf {} +"
    }
    /*
    catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE') {
        sh "[ ! -s ${config}.perf.log ] || ! cat ${config}.perf.log"
    }
    */
    catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
        sh "[ ! -s ${config}.err ] || ! cat ${config}.err"
    }
    sh "rm -rf ${target_dir}-WStmp || true"
}

pipeline {
    agent {
        node {
            label 'perf_corr_rhel8'
            customWorkspace "/work/sparta/regression/${JOB_NAME}/workspace/${BUILD_NUMBER}"
        }
    }
    environment {
        SLURM_ACCOUNT="perf"
    }
    stages {
        stage('prepare') {
            steps { script {
                githash = sh(script:'basename $(readlink -f /work/sparta/dabble/latest_func_pass)', returnStdout:true).replaceAll("\\s","")
                // update_wkld_cache
                /*
                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                    sh "/work/sparta/dabble/latest/scripts/run_dabble -r -c /work/sparta/scripts/dabble.cfg"
                }
                */
            }}
        }
        stage('dabble_correlation') {
            parallel {
                stage('p55') {
                    when {
                        expression { return checkVersion('p55', githash) }
                    }
                    steps {
                        runTest('p55', githash)
                    }
                }
                stage('p55_l1pf_off') {
                    when {
                        expression { return checkVersion('p55_l1pf_off', githash) }
                    }
                    steps {
                        runTest('p55_l1pf_off', githash)
                    }
                }
                stage('p65') {
                    when {
                        expression { return checkVersion('p65', githash) }
                    }
                    steps {
                        runTest('p65', githash)
                    }
                }
                stage('p65_l1pf_off') {
                    when {
                        expression { return checkVersion('p65_l1pf_off', githash) }
                    }
                    steps {
                        runTest('p65_l1pf_off', githash)
                    }
                }
                stage('tgv') {
                    when {
                        expression { return checkVersion('tgv', githash) }
                    }
                    steps {
                        runTest('tgv', githash)
                    }
                }
                stage('tgv_study') {
                    when {
                        expression { return !fileExists("${regression_dir['tgv_study']}/$githash/log") }
                    }
                    steps {
                        runStudy('tgv_study', githash)
                    }
                }
            }
        }
    }
    post {
        unsuccessful {
            sendErrorLogBySlack(slack_channel_for_build, currentBuild.result)
        }
        fixed {
            notifyBySlack(slack_channel_for_build, 'Back to normal')
        }
        always {
            sh """
                rmdir ../*-WStmp || true
                cd ../..; find -mindepth 1 -maxdepth 2 -mtime +7 -exec rm -rf {} +
            """
        }
    }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <quietPeriod>18000</quietPeriod>
  <disabled>false</disabled>
</flow-definition>