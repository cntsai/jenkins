<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.2">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
      <configVersion>1</configVersion>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>1</daysToKeep>
        <numToKeep>1</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>freedom-metal-small</assignedNode>
  <canRoam>false</canRoam>
  <disabled>true</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <hudson.triggers.TimerTrigger>
      <spec>H H(0-7) * * *</spec>
    </hudson.triggers.TimerTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>hostname
env
pwd


export JENKINS_BUILDS_DIR=/scratch/jenkins/archived-builds

# Load wit/wake modules
. /sifive/tools/Modules/3.2.10/init/sh
#module load sifive/wake/0.17.1
#module load sifive/wit/0.11.1
#module load riscv-tools
#module load python/python/3.7.0
python --version

# Create the Jenkins build dir if it doesn&apos;t exist
mkdir -p $JENKINS_BUILDS_DIR
cd $JENKINS_BUILDS_DIR
echo $PWD

mkdir -p $JOB_NAME/$BUILD_NUMBER
cd $JOB_NAME/$BUILD_NUMBER
echo $PWD

git clone git@github.com:sifive/federation.git
cd federation
export FEDERATION_GIT_HASH=`git rev-parse --short HEAD`
export FEDERATION_ROOT=`pwd`
export DASHBOARD_INFO=&quot;10.14.135.139,runner,kNHUUhP5AZkthSC8,8202,federation,${FEDERATION_GIT_HASH},coreip_u84_axi4,u84&quot;
export TEST_TIMESTAMP=`date &apos;+%m%d%Y%X&apos;`


./scripts/quick-submodule-update
. rc.d/riscv-tools.bashrc
BUILD_DIR=builds ./generate-build coreip_u84_axi4

git clone git@github.com:sifive/benchmark-mem_probe.git software/tests/benchmark-mem_probe
#git -C software/tests/benchmark-mem_probe reset --hard a6214d60
git clone git@github.com:sifive/ooo_probe.git software/tests/ooo_probe
git clone git@github.com:sifive/lsu_probe.git software/tests/lsu_probe
git clone git@github.com:sifive/benchmarks.git software/tests/benchmark_script
git clone git@github.com:sifive/benchmark-frontend.git software/tests/benchmark-frontend

export MEM_PROBE_ROOT=`realpath software/tests/benchmark-mem_probe`
export OOO_PROBE_ROOT=`realpath software/tests/ooo_probe`
export LSU_PROBE_ROOT=`realpath software/tests/lsu_probe`
export BENCH_SCRIPT=`realpath software/tests/benchmark_script`
export FRONTEND_ROOT=`realpath software/tests/benchmark-frontend`


cd builds/coreip_u84_axi4
pwd
ls
. ./load-modules
python --version
which python
make sim
cd sim

OUTLINE_NAME=u84_axi4.outline

#Remove score check
sed -i &quot;/score_check/d&quot; $FEDERATION_ROOT/software/tests/dhrystone/manifest.yml

cat  &gt; $OUTLINE_NAME  &lt;&lt; EOF

ENV[&apos;RISCV&apos;]=&quot;/sifive/tools/riscv-tools/riscv64-unknown-elf-gcc-8.2.0-2019.05.3-x86_64-linux-ubuntu14&quot;

benchmark_names = %w[
    useries_coremark_tuned
]
benchmark_names.each do |name|
run_test( configure_test(
        name: name,
        raw_plusargs: [&quot;+profile&quot;],
        program: {
            mem:       &apos;memory_mem&apos;,
            data_mem:  &apos;memory_mem&apos;,
            text_mem:  &apos;memory_mem&apos;,
            cppmacros: %w[BENCHMARK_NO_PRINT],
            env:       &apos;abi&apos;,
        },

    ))
end
bestset_test_names = %w[
    ooo_probe/TestAdd
    ooo_probe/TestAnd
    ooo_probe/TestAuipc
    ooo_probe/TestCadd
    ooo_probe/TestCaddi
    ooo_probe/TestCli
    ooo_probe/TestCmv
    ooo_probe/TestCslli
    ooo_probe/TestDiv
    ooo_probe/TestLui
    ooo_probe/TestMul
    ooo_probe/TestOr
    ooo_probe/TestRem
    ooo_probe/TestSll
    ooo_probe/TestSlt
    ooo_probe/TestSra
    ooo_probe/TestSrl
    ooo_probe/TestSub
    ooo_probe/TestXor
    performance_tests/stream_add
    performance_tests/stream_copy
    performance_tests/stream_scale
    performance_tests/stream_triadd
    performance_tests/matrix_multiply
    performance_tests/bw_rd
    performance_tests/bw_w
    performance_tests/mem_probe
    lsu_probe/TestForwarding
    lsu_probe/TestInterleave
    lsu_probe/TestByGroup
]

bestset_test_names.each do |name|
run_test( configure_test(
        name: name,
        raw_plusargs: [&quot;+profile&quot;],
        program: {
            mem:       &apos;memory_mem&apos;,
            data_mem:  &apos;memory_mem&apos;,
            text_mem:  &apos;memory_mem&apos;,
            env:       &apos;abi&apos;,
        },

    ))
end


frontend_probe_test = %w[
    benchmark-frontend/j64b_aligned
    benchmark-frontend/j128b_unaligned
]
text_mem_list = %w[
    memory_mem0
]
cacheable_test_range = [256,128,64,32,16,8,4]


frontend_probe_test.product( text_mem_list , cacheable_test_range ) do |test,target,size|
run_test( configure_test(
      name: test,
      raw_plusargs: [&quot;+profile&quot;],
      subdir:  target+&apos;/&apos;+size.to_s,
      program: {
          mem:       &apos;memory_mem&apos;,
          data_mem:  &apos;memory_mem&apos;,
          text_mem:  target,
          cppmacros: [ &quot;TEST_SIZE=&quot;+size.to_s ,&quot;ITERATION=4&quot;],
          env:       &apos;abi&apos;,
      },
 ))
end


EOF

./sitest -j8 @$OUTLINE_NAME @$FEDERATION_ROOT/test-outlines/useries_dhrystone.outline +verbose

#python virtual env
module load python/python/3.7.0
virtualenv --python=python3 venv
. venv/bin/activate
python3 -m pip install cryptography
python3 -m pip install pymysql


python $FEDERATION_ROOT/benchmark-mem_probe/mem_probe/analyze_probe_result.py         --rtlOut sim/$OUTLINE_NAME/performance_tests/mem_probe/simulation.err        --detail --to_dashboard &quot;$DASHBOARD_INFO,$TEST_TIMESTAMP,memory_mem&quot;
python $FEDERATION_ROOT/benchmark-mem_probe/bw_rd/analyze_rtlsim_result.py            --rtlOut sim/$OUTLINE_NAME/performance_tests/bw_rd/simulation.err            --detail --to_dashboard &quot;$DASHBOARD_INFO,$TEST_TIMESTAMP,memory_mem&quot;
python $FEDERATION_ROOT/benchmark-mem_probe/bw_w/analyze_rtlsim_result.py             --rtlOut sim/$OUTLINE_NAME/performance_tests/bw_w/simulation.err             --detail --to_dashboard &quot;$DASHBOARD_INFO,$TEST_TIMESTAMP,memory_mem&quot;
python $FEDERATION_ROOT/benchmark-mem_probe/stream_add/analyze_rtlsim_result.py       --rtlOut sim/$OUTLINE_NAME/performance_tests/stream_add/simulation.err       --detail --to_dashboard &quot;$DASHBOARD_INFO,$TEST_TIMESTAMP&quot;
python $FEDERATION_ROOT/benchmark-mem_probe/stream_scale/analyze_rtlsim_result.py     --rtlOut sim/$OUTLINE_NAME/performance_tests/stream_scale/simulation.err     --detail --to_dashboard &quot;$DASHBOARD_INFO,$TEST_TIMESTAMP&quot;
python $FEDERATION_ROOT/benchmark-mem_probe/stream_triadd/analyze_rtlsim_result.py    --rtlOut sim/$OUTLINE_NAME/performance_tests/stream_triadd/simulation.err    --detail --to_dashboard &quot;$DASHBOARD_INFO,$TEST_TIMESTAMP&quot;
python $FEDERATION_ROOT/benchmark-mem_probe/stream_copy/analyze_rtlsim_result.py      --rtlOut sim/$OUTLINE_NAME/performance_tests/stream_copy/simulation.err      --detail --to_dashboard &quot;$DASHBOARD_INFO,$TEST_TIMESTAMP&quot;
python $FEDERATION_ROOT/benchmark-mem_probe/matrix_multiply/analyze_rtlsim_result.py  --rtlOut sim/$OUTLINE_NAME/performance_tests/matrix_multiply/simulation.err  --detail --to_dashboard &quot;$DASHBOARD_INFO,$TEST_TIMESTAMP&quot;

OOO_ARRAY=(Add And Auipc Cadd Caddi Cli Cmv Cslli Div Lui Mul Or Rem Sll Slt Sra Srl Sub Xor)
for i in ${OOO_ARRAY[@]}
do
    OOO_DASHBOARD_INFO=${DASHBOARD_INFO}&quot;,$TEST_TIMESTAMP,$i&quot;
    python $OOO_PROBE_ROOT/script/analyze_probe_result.py --rtlOut  sim/$OUTLINE_NAME/ooo_probe/Test${i}/simulation.err --to_dashboard $OOO_DASHBOARD_INFO
done


python $BENCH_SCRIPT/scripts/parse_benchmark_score.py -r sim/$OUTLINE_NAME/useries_coremark_tuned/simulation.err  -e sim/$OUTLINE_NAME/useries_coremark_tuned/program.elf  -b coremark  -f 1 -i 10  --dashboard &quot;$DASHBOARD_INFO,$TEST_TIMESTAMP&quot;
python $BENCH_SCRIPT/scripts/parse_benchmark_score.py -r sim/useries_dhrystone.outline/dhrystone/simulation.err -e sim/useries_dhrystone.outline/dhrystone/program.elf -b dhrystone -f 1 -i 500 --dashboard &quot;$DASHBOARD_INFO,$TEST_TIMESTAMP&quot;

python $LSU_PROBE_ROOT/script/analyze_probe_result.py --rtlOut sim/$OUTLINE_NAME/lsu_probe/TestForwarding/simulation.err --probeType TestForwarding --to_dashboard &quot;$DASHBOARD_INFO,$TEST_TIMESTAMP&quot;
python $LSU_PROBE_ROOT/script/analyze_probe_result.py --rtlOut sim/$OUTLINE_NAME/lsu_probe/TestInterleave/simulation.err --probeType TestInterleave --to_dashboard &quot;$DASHBOARD_INFO,$TEST_TIMESTAMP&quot;
python $LSU_PROBE_ROOT/script/analyze_probe_result.py --rtlOut sim/$OUTLINE_NAME/lsu_probe/TestByGroup/simulation.err    --probeType TestByGroup    --to_dashboard &quot;$DASHBOARD_INFO,$TEST_TIMESTAMP&quot;


for i in `find sim/$OUTLINE_NAME  -type d -name &quot;benchmark-frontend&quot;`
do
    echo $i
    for j in `find $i -name &quot;simulation.err&quot;`
    do
        DIRNAME=`dirname $i`
        DIRNAME2=`dirname $DIRNAME`
        TARGET_MEM=`basename $DIRNAME2`
        python $FRONTEND_ROOT/analyze_rtlsim_result.py \
            --rtlOut $j \
            --detail    \
            --to_dashboard &quot;$DASHBOARD_INFO,$TEST_TIMESTAMP,$TARGET_MEM&quot;

    done
done

ls -al

</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers/>
</project>