<?xml version="1.1" encoding="UTF-8" standalone="no"?><flow-definition plugin="workflow-job@1145.v7f2433caa07f">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.9.3"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.9.3">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description/>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.7"/>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>10</daysToKeep>
        <numToKeep>10</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.33">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.6">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit/>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers/>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2660.vb_c0412dc4e6d">
    <script>#!groovy

def federationCheckout(String commitish, String baseCommit='')
{
    def GITHUB_SSH_CREDENTIALS_ID = 'ad25d95a-4a30-4cc9-bda9-e836d51af0b9'
    deleteDir()
    checkout([
        $class: 'GitSCM',
        branches: [[name: commitish]],
        extensions: [[$class: 'CloneOption', reference: '/work/github-cache/federation.git']],
        userRemoteConfigs: [[
            credentialsId: GITHUB_SSH_CREDENTIALS_ID,
            url: "git@github.com:sifive/federation.git"]],
    ])
    if (baseCommit != '') {
        sh "git checkout --detach ; git merge --no-commit $baseCommit"
    }
}

def util=null
pipeline {
    agent {
        node {
            label 'score_guard_rhel8'
            customWorkspace "/work/sparta/regression/performance-regression/score_guard-orca/${BUILD_ID}"
        }
    }
    environment {
        WAKE_ENV="sanmateo"
        SLURM_ACCOUNT="perf_ci"
        SALLOC_ACCOUNT="perf_ci"
        SLURM_BATCH="perf_ci"
        BRANCH_NAME="release_generator_orca"
    }
    stages {
        stage('checkout') { steps {
            sh "hostname; pwd"
            federationCheckout(BRANCH_NAME)
            sh "git clone git@github.com:sifive/score_guard -b develop --recursive"
            script {
                load("./jenkins/common.groovy").quickSubmoduleUpdate()
                util = load "./score_guard/score_guard.groovy"
                util.prepare()
            }
        }}

        stage('run') { parallel {
            stage('sitest') { steps { script {
                util.scoreGuardSitest()
            }}}
            stage('pcs_build') { steps { script {
                util.scoreGuardBuild()
            }}}
            stage('pcs_default') { steps { script {
                util.scoreGuardRun('pcs_default')
            }}}
            stage('pcs_default_llvm') { steps { script {
                util.scoreGuardRun('pcs_default_llvm')
            }}}
            stage('pcs_snap_sw') { steps { script {
                util.scoreGuardRun('pcs_snap_sw')
            }}}
            stage('pcs_snap_sw_llvm') { steps { script {
                util.scoreGuardRun('pcs_snap_sw_llvm')
            }}}
        }}
    }
    post {
        fixed { script {
            util.fixed()
        }}
        failure { script {
            util.unsuccessful()
        }}
        unstable { script {
            util.unsuccessful()
        }}
        cleanup { script {
            util.cleanup()
        }}
    }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>