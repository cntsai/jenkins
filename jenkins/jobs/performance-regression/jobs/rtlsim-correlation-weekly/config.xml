<?xml version="1.1" encoding="UTF-8" standalone="no"?><flow-definition plugin="workflow-job@1145.v7f2433caa07f">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.9.3"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.9.3">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>weekly run p550 rtlsim verilator binary&#13;
&lt;p&gt;Owners: Hsinyi Lee, Fu-Ching Yang&#13;
Backup: Mike Schoenfelder</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.7"/>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>50</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.33">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.6">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit/>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers>
        <hudson.triggers.TimerTrigger>
          <spec>H H * * 5</spec>
        </hudson.triggers.TimerTrigger>
      </triggers>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2660.vb_c0412dc4e6d">
    <script>#!groovy

def _slack_channel_for_build='#tw-perf-alert'
slack_channel_for_build='#tw-perf-alert'

dabble_golden_dir='/work/sparta/regression/dabble_correlate_golden'
rtlsim_golden_dir='/work/sparta/regression/rtlsim_golden'

def notifyBySlack(channel, result='', message='')
{
    result = result == null ? 'SUCCESS' : result
    def color=['FAILURE': '#A30200',
               'BUILD_FAIL': '#A30200',
               'PERF_CHANGE':'#DAA038',
               'UNSTABLE': '#DAA038',
               'Back to normal': '#2EB886',
               'SUCCESS': '#2EB886']
    slackSend(
        channel: channel,
        color:color[result],
        message: """${env.JOB_NAME} - #${env.BUILD_ID} - ${result} (&lt;${env.RUN_DISPLAY_URL}|Open&gt;)
$message""")
}

def readFileWithMaxLen(filename, maxlength=1000)
{
    def msg = readFile(filename)
    if (msg.length() &gt; maxlength) {
        msg = msg.substring(0, maxlength) + " ..."
    }
    return "```" + msg + "```\n"
}

buildSummaryMsg=''
def sendErrorLogBySlack(channel, status) {
    notifyBySlack(channel, status, buildSummaryMsg)
}

def checkResult(title, err_file, perf_change_file=null, channel=null, dashboard_url=null)
{
    def msg = ""
    def result = null

    if (perf_change_file){
    catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE') {
    try {
        sh "[ ! -s $perf_change_file ] || ! cat $perf_change_file"
    } catch (e) {
        buildSummaryMsg += readFileWithMaxLen(perf_change_file)
        if (dashboard_url) {
            buildSummaryMsg += " (&lt;$dashboard_url|Dashboard&gt;)\n"
        }
        throw e
    }}}

    catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
    try {
        sh "[ ! -s $err_file ] || ! cat $err_file"
    } catch (e) {
        buildSummaryMsg += title + "\n" + readFileWithMaxLen(err_file)
        throw e
    }}

}

def runCorrTest(config, notify, githash)
{
    def target_dir="../../${config}/$githash"
    dir (target_dir) {
        stage('run') {
            sh "chmod g+w . .. || true"
            catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') { timestamps {
                sh "/work/sparta/scripts/jenkins/rtlsim_correlate.sh $config $githash"
            }}
        }
        stage('check') {
            if (notify) {
                def build = sh(script:"grep 'config:' build.yaml | awk -v ORS= '{print \$2}'", returnStdout:true)
                def url = "http://vis01.internal.sifive.com:8203/d/k1pcacXMk/mallard-performance-regression?var-build=$build"
              //checkResult(config + '_corr', 'log', 'bm_alert.log', slack_channel_for_build, url)
                checkResult(config + '_corr', 'log', null,           slack_channel_for_build, url)
            } else {
              //checkResult(config + '_corr', 'log', 'bm_alert.log')
                checkResult(config + '_corr', 'log', null          )
            }
        }
    }
    sh """
        rm -rf ${target_dir}-WStmp
        find \$(dirname ${target_dir}) -mindepth 1 -maxdepth 1 -mtime +10 -exec rm -rf {} +
    """
}

githash=''

pipeline
{
    agent {
        node {
            label 'tiny_rhel8'
            customWorkspace "/work/sparta/regression/${JOB_NAME}/workspace/${BUILD_NUMBER}"
        }
    }
    environment {
        SLURM_ACCOUNT="perf_ci"
        SALLOC_ACCOUNT="perf_ci"
        SLURM_BATCH="perf_ci"
    }
    stages {
        stage('prepare') {
            steps { script {
                githash = sh(script:"basename \$(readlink -f /work/sparta/rtlsim/p55/latest)", returnStdout:true).replaceAll("\\s","")
            }}
        }
        stage('rtlsim_correlation') { parallel {
            stage('p55_corr') {
                steps {
                    runCorrTest('p55', true, githash)
                }
            }
            stage('p55_l1pf_off_corr') {
                steps {
                    runCorrTest('p55_l1pf_off', false, githash)
                }
            }
            stage('p65_waveform_snapshot') {
                steps {
                    sh "JOBS=100 /work/sparta/scripts/jenkins/rtlsim_waveform_snapshot.sh p65"
                    checkResult('p65_waveform_snapshot', 'log', null, slack_channel_for_build)
                }
            }
        }}
    }
    post {
        fixed {
            notifyBySlack(_slack_channel_for_build, 'Back to normal')
        }
        failure {
            sendErrorLogBySlack(_slack_channel_for_build, currentBuild.result)
        }
        always {
            sh """
                rm -rf ../$githash/*-WStmp
                find .. -mindepth 1 -maxdepth 2 -mtime +10 -exec rm -rf {} +
            """
            cleanWs()
        }
    }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>