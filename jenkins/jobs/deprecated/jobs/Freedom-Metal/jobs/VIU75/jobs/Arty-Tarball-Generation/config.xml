<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Build tarballs for standard cores on Arty and run tests on epsilon node</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.1.1"/>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>7</daysToKeep>
        <numToKeep>7</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.18">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.2">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
      <configVersion>1</configVersion>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@4.3.0">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>git@github.com:sifive/product-coreip-sifive.git</url>
        <credentialsId>ad25d95a-4a30-4cc9-bda9-e836d51af0b9</credentialsId>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>*/release_generator_kiwi</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.SubmoduleOption>
        <disableSubmodules>false</disableSubmodules>
        <recursiveSubmodules>true</recursiveSubmodules>
        <trackingSubmodules>false</trackingSubmodules>
        <reference></reference>
        <parentCredentials>false</parentCredentials>
        <shallow>false</shallow>
      </hudson.plugins.git.extensions.impl.SubmoduleOption>
    </extensions>
  </scm>
  <assignedNode>fpga-benchmark-regression</assignedNode>
  <canRoam>false</canRoam>
  <disabled>true</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <hudson.triggers.SCMTrigger>
      <spec>H H(0-7) * * *</spec>
      <ignorePostCommitHooks>false</ignorePostCommitHooks>
    </hudson.triggers.SCMTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>hostname
env
pwd

cd ..
rm -rf product-coreip-sifive
mv $JOB_BASE_NAME product-coreip-sifive
cd product-coreip-sifive

export PATH_TO_PRODUCT_COREIP_SIFIVE=$(realpath .)
echo &quot;$PATH_TO_PRODUCT_COREIP_SIFIVE&quot;
export JENKINS_BUILDS_DIR=/scratch/jenkins/archived-builds
export TARBALL_DEST_DIR=/work/pcs-daily/$(date +%Y-%m-%d)/$JOB_NAME

# Load wit/wake modules
. /sifive/tools/Modules/3.2.10/init/sh
module load sifive/wake/0.17.2
module load sifive/wit/0.12.0

# Create the Jenkins build dir if it doesn&apos;t exist
mkdir -p $JENKINS_BUILDS_DIR
cd $JENKINS_BUILDS_DIR
echo $PWD

	# Create the build directory
mkdir -p $JOB_NAME/$BUILD_NUMBER
cd $JOB_NAME/$BUILD_NUMBER
echo $PWD

	# Initialize the workspace
wit init workspace -a $PATH_TO_PRODUCT_COREIP_SIFIVE -a git@github.com:sifive/environment-sanmateo-sifive.git
cd workspace

	# Initialize wake
wake --init .

	# Run examples on all standard cores
	# Timeout set to 12 hours
if timeout 8h wake -p30 --no-tty &apos;deliver (Arty, Nil) Verilator exampleTests allStandardCores standardCoresThatFitOnArty&apos;
#if timeout 8h wake -p30 --no-tty &apos;deliver (Arty, Nil) Verilator allSDKExamples standardCore &quot;e31&quot;&apos;

#2&gt;error.log
then
	echo &quot;Tarball Generation Passed&quot;
else
	echo &quot;Tarball Generation Failed&quot;
    wake --failed -v
fi

	# Copy deliveries to $TARBALL_DEST_DIR
mkdir -p $TARBALL_DEST_DIR
echo &quot;Generated by Jenkins job $JOB_NAME build $BUILD_NUMBER on host $(hostname) from PCS commit $(git -C product-coreip-sifive rev-parse HEAD)&quot; &gt; $TARBALL_DEST_DIR/readme.txt
/work/erikd/extract-rename.sh --workspace-path=. --output-path=$TARBALL_DEST_DIR/
	#rsync -rmv --include=&quot;ipdelivery.tar.gz&quot; --include=&quot;*/&quot; --exclude=&quot;*&quot; build/$JOB_NAME/* $TARBALL_DEST_DIR

#Salloc for run on epsilon:

export TIMESTAMP=$(date +%m-%d-%y.%H.%M)
export DIRNAME=&quot;/scratch/jenkins/freedom-e-sdk-infra&quot;&apos;-&apos;&quot;$TIMESTAMP&quot;
git clone git@github.com:sifive/freedom-e-sdk-infra.git &quot;$DIRNAME&quot;

export PATH=$PATH:/sifive/tools/openocd/0.10.0-2019.08.2/bin
export PATH=$PATH:/sifive/tools/riscv-tools/riscv64-unknown-elf-gcc-8.3.0-2019.08.0-x86_64-linux-ubuntu14/bin

echo &quot;SALLOC to epsilon&quot;
echo $DIRNAME
/work/boardtest/salloc_copy.py --cpus-per-task 4 --time 4:0:0 --mem 1024 --ntasks 1 --partition boardtest --copy-to-include $DIRNAME --copy-back-include $DIRNAME --chdir $DIRNAME --exec_attempts 1 -- $DIRNAME/coreip-fpga-regression.bash --tar-path=$TARBALL_DEST_DIR/
find /scratch/jenkins/freedom-e-sdk-infra* -mtime +7 -type d -exec rm -rf {} \;
if find $DIRNAME -name results.txt -exec grep -r &apos;FAILED&apos; {} +
then
	exit 1
else
	exit 0
fi

</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers/>
</project>